#!/bin/python

import asyncio
import json
import os
import signal
import sys
import threading
import time
from argparse import ArgumentParser
from datetime import datetime

import requests
import websockets
import yaml


class Channel:
    def __init__(self, id, config):
        self.id = id
        self.timeout = config['timeout']
        self.separator = config['separator']

    def fetch(self):
        for url in self.urls:
            try:
                self._fetch(url)
                return
            except KeyError as e:
                print(f'error: Cannot fetch "{self.id}": {e} not found in response data, using next instance', file=sys.stderr)
            except requests.RequestException as e:
                print(f'error: Cannot fetch "{self.id}": {e}, using next instance', file=sys.stderr)
            except BrokenPipeError:
                devnull = os.open(os.devnull, os.O_WRONLY)
                os.dup2(devnull, sys.stdout.fileno())
                exit()

        print(f'error: Cannot fetch "{self.id}": No instance available', file=sys.stderr)

    def _date_to_clock(self, date: str) -> str:
        date = datetime.strptime(date, '%Y-%m-%dT%H:%M:%S%z')
        diff = datetime.now(date.tzinfo) - date

        return time.strftime('%H:%M:%S', time.gmtime(diff.total_seconds()))


class TT(Channel):
    def __init__(self, id, config):
        super().__init__(id, config)

        self.urls = config['safetwitch']

    def _fetch(self, url):
        channel = requests.get(f'{url}/api/users/{self.id}', timeout=self.timeout).json()['data']

        if channel['isLive']:
            print(
                channel['username'],
                channel['stream']['title'],
                channel['stream']['topic'],
                channel['stream']['viewers'],
                self._date_to_clock(channel['stream']['startedAt'].replace('Z', '+00:00')),
                'https://twitch.tv/' + self.id,
                sep=self.separator,
                flush=True
            )

    def is_live(self):
        for url in self.urls:
            try:
                channel = requests.get(f'{url}/api/users/{self.id}', timeout=self.timeout).json()['data']
                return channel['isLive']
            except (KeyError, requests.RequestException):
                continue

        return False


class YT(Channel):
    def __init__(self, id, config):
        super().__init__(id, config)

        self.urls = config['piped']

    def _fetch(self, url):
        videos = requests.get(f'{url}/channels/tabs?data={{"id":"{self.id}","contentFilters":["livestreams"]}}', timeout=self.timeout).json()['content']

        for video in videos:
            if video['duration'] == -1:
                print(
                    video['uploaderName'],
                    video['title'],
                    '',
                    video['views'],
                    '',
                    'https://youtube.com' + video['url'],
                    sep=self.separator,
                    flush=True
                )


class Channels:
    def __init__(self, config):
        self.channels = [TT(id, config) for id in config['twitch']] \
                      + [YT(id, config) for id in config['youtube']]

    def fetch(self):
        threads = [threading.Thread(target=c.fetch, daemon=True) for c in self.channels]

        for thread in threads:
            thread.start()

        for thread in threads:
            thread.join()


class Chat:
    def __init__(self, id: str, config: dict):
        self.id = id.split('/')[-1]
        self.uri = [uri.replace('http', 'ws') for uri in config['safetwitch']]
        self.is_live = TT(self.id, config).is_live()

    async def listen(self):
        if not self.is_live:
            print(f'{self.id} is offline')
            return

        print(f'Joining {self.id} chat... ', end='')
        for uri in self.uri:
            try:
                async with websockets.connect(uri) as websocket:
                    await websocket.send(f'JOIN {self.id}')

                    if (message := await websocket.recv()) == 'OK':
                        print(f'Connected to {self.id}')
                    else:
                        print(f'error: Invalid initial message "{message}"', file=sys.stderr)

                    async for message in websocket:
                        self.print(message)
            except (OSError, websockets.InvalidURI, websockets.InvalidHandshake, websockets.ConnectionClosed) as e:
                print(f'error: Instance "{uri}": {e}, using next instance', file=sys.stderr)

        print('error: No instance available', file=sys.stderr)

    def print(self, message: str):
        try:
            m = json.loads(message)

            if m['type'] == 'PRIVMSG':
                print(f'{self.get_name(m)}: {m['message'].strip()}')
        except KeyError as e:
            print(f'error: "{e}" not found in {message}', file=sys.stderr)
        except json.JSONDecodeError:
            print(f'error: Cannot parse "{message}"', file=sys.stderr)

    def get_name(self, message: str) -> str:
        try:
            r = int(message['tags']['color'][1:3], 16)
            g = int(message['tags']['color'][3:5], 16)
            b = int(message['tags']['color'][5:7], 16)
        except ValueError:
            return message['tags']['display-name']

        return f'\033[38;2;{r};{g};{b}m{message['tags']['display-name']}\033[0m'


def get_config() -> dict:
    config_dir = os.environ.get('XDG_CONFIG_HOME', os.environ.get('HOME') + '/.config')

    with open(config_dir + '/ttv/config.yml') as f:
        return {
                'piped': ['https://pipedapi.kavin.rocks'],
                'safetwitch': ['https://stbackend.drgns.space'],
                'twitch': [],
                'youtube': [],
                'timeout': 5,
                'separator': ';',
                **yaml.safe_load(f)
        }

if __name__ == '__main__':
    signal.signal(signal.SIGINT, lambda s, f: [print(), exit()])

    parser = ArgumentParser(description='Feed for Twitch and YouTube livestreams')
    parser.add_argument('-c', '--chat', help='Show Twitch Chat for given channel id or url')
    args = parser.parse_args()

    try:
        config = get_config()
    except FileNotFoundError:
        exit('error: Config not found')
    except yaml.YAMLError as e:
        exit('error: Config syntax: ' + str(e))

    if args.chat:
        asyncio.run(
            Chat(args.chat, config).listen()
        )

        exit()

    Channels(config).fetch()
